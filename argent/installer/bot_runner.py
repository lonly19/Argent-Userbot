from __future__ import annotations
import asyncio
import base64
import io
import threading
import time
from typing import Dict, Optional
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
try:
    from aiogram.client.default import DefaultBotProperties
except Exception:
    DefaultBotProperties = None
from .telethon_manager import TelethonAuthFlow, SessionStore, AuthError
from ..security.owner_manager import OwnerManager

class BotRunner:

    def __init__(self):
        self._loop: Optional[asyncio.AbstractEventLoop] = None
        self._thread: Optional[threading.Thread] = None
        self._bot: Optional[Bot] = None
        self._dp: Optional[Dispatcher] = None
        self._running = False
        self._state: Dict[int, Dict] = {}
        self._store: Optional[SessionStore] = None
        self._owner_manager = OwnerManager()
        self._max_states = 10
        self._rate_limit: Dict[int, float] = {}
        self._auto_started_userbot: bool = False

    async def _get_me_username(self, token: str) -> Optional[str]:
        url = f'https://api.telegram.org/bot{token}/getMe'
        async with aiohttp.ClientSession() as sess:
            async with sess.get(url, timeout=10) as r:
                if r.status != 200:
                    return None
                data = await r.json()
                if not data.get('ok'):
                    return None
                return data['result'].get('username')

    def get_username_sync(self, token: str) -> Optional[str]:

        async def _wrap():
            return await self._get_me_username(token)
        return asyncio.run(_wrap())

    def _cleanup_old_states(self):
        current_time = time.time()
        timeout = 30 * 60
        to_remove = []
        for uid, state in self._state.items():
            if current_time - state.get('timestamp', 0) > timeout:
                to_remove.append(uid)
        for uid in to_remove:
            self._state.pop(uid, None)

    def start(self, bot_token: str, store: SessionStore):
        if self._running:
            return
        self._running = True
        self._store = store
        self._thread = threading.Thread(target=self._run, args=(bot_token,), daemon=True)
        self._thread.start()

    def _run(self, bot_token: str):
        self._loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self._loop)
        self._loop.run_until_complete(self._run_async(bot_token))

    async def _run_async(self, bot_token: str):
        try:
            if DefaultBotProperties is not None:
                self._bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            else:
                self._bot = Bot(token=bot_token, parse_mode=ParseMode.HTML)
        except TypeError:
            self._bot = Bot(token=bot_token, parse_mode=ParseMode.HTML)
        except Exception as e:
            self._bot = Bot(token=bot_token)
        self._dp = Dispatcher()
        self._bind_handlers()
        try:
            await self._dp.start_polling(self._bot, handle_signals=False)
        except Exception as e:
            pass
        finally:
            self._running = False

    def _bind_handlers(self):
        assert self._dp is not None
        dp = self._dp

        def owner_required(handler):

            async def wrapper(message_or_callback):
                user_id = message_or_callback.from_user.id
                current_time = time.time()
                if user_id in self._rate_limit:
                    if current_time - self._rate_limit[user_id] < 1.0:
                        if hasattr(message_or_callback, 'answer'):
                            if hasattr(message_or_callback, 'message'):
                                await message_or_callback.answer('‚è±Ô∏è –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ', show_alert=True)
                            else:
                                await message_or_callback.answer('‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º')
                        return
                self._rate_limit[user_id] = current_time
                if not self._owner_manager.is_owner(user_id):
                    if hasattr(message_or_callback, 'answer'):
                        if hasattr(message_or_callback, 'message'):
                            await message_or_callback.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', show_alert=True)
                        else:
                            await message_or_callback.answer('‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\nüîí –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                    return
                return await handler(message_or_callback)
            return wrapper

        @dp.message(CommandStart())
        async def handle_start(message: Message):
            uid = message.from_user.id
            username = message.from_user.username or 'Unknown'
            first_name = message.from_user.first_name or 'Unknown'
            if not self._owner_manager.has_primary_owner():
                if self._owner_manager.set_primary_owner(uid):
                    await message.answer(f'üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–ª–∞–¥–µ–ª–µ—Ü!</b>\n\nüëë <b>–í—ã —Å—Ç–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Argent UserBot</b>\nüÜî <b>–í–∞—à ID:</b> <code>{uid}</code>\nüë§ <b>–ò–º—è:</b> {first_name}\nüì± <b>Username:</b> @{username}\n\nüîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b>\n‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º\n‚Ä¢ –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ\n‚Ä¢ –í–∞—à ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\nüöÄ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...</b>')
            elif not self._owner_manager.is_owner(uid):
                await message.answer(f'‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\nüîí <b>–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\nüí° <b>–•–æ—Ç–∏—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç?</b>\nüìÇ GitHub: github.com/lonly19/Argent-Userbot')
                return
            if len(self._state) >= self._max_states and uid not in self._state:
                await message.answer('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
                return
            self._state[uid] = {'step': 'ask_api_id', 'timestamp': time.time()}
            await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Argent UserBot —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>api_id</b>:')

        @dp.message(F.text.regexp('^/info(.*)'))
        @owner_required
        async def handle_info(message: Message):
            await message.answer('<b>Argent UserBot</b> \n\n‚Ä¢ –í–µ—Ä—Å–∏—è: 0.1.0\n‚Ä¢ –°—Ç–∞—Ç—É—Å: —É—Å—Ç–∞–Ω–æ–≤–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n‚Ä¢ –ú–æ–¥—É–ª–µ–π: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ\n‚Ä¢ GitHub: github.com/lonly19/Argent-Userbot\n')

        @dp.message(F.text.regexp('^/help(.*)'))
        @owner_required
        async def handle_help(message: Message):
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ', callback_data='help_cat:core')], [InlineKeyboardButton(text='üß∞ –£—Ç–∏–ª–∏—Ç—ã', callback_data='help_cat:utils')], [InlineKeyboardButton(text='‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞', callback_data='help_cat:system')]])
            await message.answer('<b>–ü–æ–º–æ—â—å ‚Äî Argent UserBot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n–°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', reply_markup=kb)

        @dp.callback_query(F.data.startswith('help_cat:'))
        @owner_required
        async def handle_help_cat(cb: CallbackQuery):
            cat = cb.data.split(':', 1)[1]
            if cat == 'core':
                text = 'üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>\n\n‚Ä¢ .info ‚Äî —Å–≤–µ–¥–µ–Ω–∏—è –æ –±–æ—Ç–µ\n‚Ä¢ .help ‚Äî –º–µ–Ω—é –ø–æ–º–æ—â–∏'
            elif cat == 'utils':
                text = 'üß∞ <b>–£—Ç–∏–ª–∏—Ç—ã</b>\n\n‚Ä¢ (—Å–∫–æ—Ä–æ)'
            else:
                text = '‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞</b>\n\n‚Ä¢ (—Å–∫–æ—Ä–æ)'
            await cb.message.edit_text(text, reply_markup=cb.message.reply_markup)
            await cb.answer()

        @dp.message(F.text == '.help')
        @owner_required
        async def handle_dot_help(message: Message):
            return await handle_help(message)

        @dp.message(F.text == '.info')
        @owner_required
        async def handle_dot_info(message: Message):
            return await handle_info(message)

        @dp.message()
        @owner_required
        async def handle_text(message: Message):
            uid = message.from_user.id
            self._cleanup_old_states()
            if uid not in self._state:
                return
            st = self._state[uid]
            step = st.get('step')
            text = (message.text or '').strip()
            if step == 'ask_api_id':
                if not text.isdigit():
                    await message.answer('‚ùó api_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    return
                st['api_id'] = int(text)
                st['step'] = 'ask_api_hash'
                await message.answer('–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>api_hash</b>:')
                return
            if step == 'ask_api_hash':
                if len(text) < 10:
                    await message.answer('‚ùó api_hash –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    return
                st['api_hash'] = text
                st['step'] = 'choose_method'
                kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üì± QR-–∫–æ–¥', callback_data='login_qr'), InlineKeyboardButton(text='üìû SMS-–∫–æ–¥', callback_data='login_sms')]])
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—Ö–æ–¥–∞:', reply_markup=kb)
                return
            if step == 'ask_phone':
                phone = text
                st['phone'] = phone
                api_id = st['api_id']
                api_hash = st['api_hash']
                flow = TelethonAuthFlow(api_id, api_hash, self._store)
                try:
                    token = await flow.start_sms_login(phone)
                    st['sms_token'] = token
                    st['step'] = 'ask_sms_code'
                    await message.answer('–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:')
                except AuthError as e:
                    await message.answer(f'‚ùó –û—à–∏–±–∫–∞: {e}')
                return
            if step == 'ask_sms_code':
                code = text
                api_id = st['api_id']
                api_hash = st['api_hash']
                token = st.get('sms_token')
                flow = TelethonAuthFlow(api_id, api_hash, self._store)
                try:
                    session_string = await flow.finish_sms_login(token, code, password=None)
                    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_2fa')]])
                    await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å 2FA, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=kb)
                    st['pending_session'] = session_string
                    st['step'] = 'optional_2fa'
                except AuthError as e:
                    if '2FA' in str(e):
                        st['step'] = 'ask_2fa'
                        await message.answer('üîí –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:')
                    else:
                        await message.answer(f'‚ùó –û—à–∏–±–∫–∞: {e}')
                return
            if step == 'ask_2fa':
                password = text
                api_id = st['api_id']
                api_hash = st['api_hash']
                token = st.get('sms_token')
                flow = TelethonAuthFlow(api_id, api_hash, self._store)
                try:
                    session_string = await flow.finish_sms_login(token, code=None, password=password)
                    st['pending_session'] = session_string
                    st['step'] = 'save_and_done'
                    await self._finalize_install(uid, message)
                except AuthError as e:
                    await message.answer(f'‚ùó –û—à–∏–±–∫–∞ 2FA: {e}')
                return
            if step == 'optional_2fa':
                st['step'] = 'save_and_done'
                await self._finalize_install(uid, message)
                return

        @dp.callback_query(F.data == 'login_qr')
        @owner_required
        async def handle_login_qr(cb: CallbackQuery):
            uid = cb.from_user.id
            st = self._state.setdefault(uid, {})
            api_id = st.get('api_id')
            api_hash = st.get('api_hash')
            flow = TelethonAuthFlow(api_id, api_hash, self._store)
            try:
                qr_png_b64, token, _ = await flow.start_qr_login()
                st['qr_token'] = token
                img_bytes = base64.b64decode(qr_png_b64.split(',', 1)[1])
                file = InputFile(io.BytesIO(img_bytes), filename='qr.png')
                await cb.message.answer_photo(photo=file, caption='–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –≤ Telegram –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ')
                await cb.answer()
                for _ in range(60):
                    ok, session_string = await flow.poll_qr_login(token)
                    if ok:
                        st['pending_session'] = session_string
                        st['step'] = 'save_and_done'
                        await self._finalize_install(uid, cb.message)
                        return
                    await asyncio.sleep(2)
                await cb.message.answer('‚åõ —Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            except AuthError as e:
                await cb.message.answer(f'‚ùó –û—à–∏–±–∫–∞: {e}')

        @dp.callback_query(F.data == 'login_sms')
        @owner_required
        async def handle_login_sms(cb: CallbackQuery):
            uid = cb.from_user.id
            st = self._state.setdefault(uid, {})
            st['step'] = 'ask_phone'
            await cb.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567:')
            await cb.answer()

        @dp.callback_query(F.data == 'skip_2fa')
        @owner_required
        async def handle_skip_2fa(cb: CallbackQuery):
            uid = cb.from_user.id
            st = self._state.setdefault(uid, {})
            st['step'] = 'save_and_done'
            await self._finalize_install(uid, cb.message)
            await cb.answer()

    async def _finalize_install(self, uid: int, message: Message):
        st = self._state.get(uid) or {}
        sess = st.get('pending_session')
        api_id = st.get('api_id')
        api_hash = st.get('api_hash')
        if not (sess and api_id and api_hash):
            await message.answer('‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.')
            return
        assert self._bot is not None
        bot_token = self._bot.token
        self._store.save_install(user_session=sess, bot_token=bot_token, api_id=api_id, api_hash=api_hash)
        await message.answer('üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! Argent UserBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.')
        self._state.pop(uid, None)

    async def _delayed_start_userbot(self, delay: int=10):
        await asyncio.sleep(delay)
        try:
            import sys
            import subprocess
            import os
            project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))
            script_path = os.path.join(project_root, 'start_argent.py')
            if not os.path.exists(script_path):
                return
            creationflags = 0
            if os.name == 'nt':
                creationflags = getattr(subprocess, 'CREATE_NO_WINDOW', 0)
            subprocess.Popen([sys.executable, script_path], cwd=project_root, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL, creationflags=creationflags)
        except Exception:
            pass
global_bot_runner = BotRunner()
