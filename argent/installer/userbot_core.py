import asyncio
import logging
from typing import Dict, List, Optional
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from .telethon_manager import SessionStore
logger = logging.getLogger(__name__)

class ArgentUserBot:

    def __init__(self, store: SessionStore):
        self.store = store
        self.client: Optional[TelegramClient] = None
        self.modules: Dict[str, object] = {}
        self.commands: Dict[str, callable] = {}
        self._running = False

    async def start(self):
        config = self.store.load_install()
        if not config:
            raise RuntimeError('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫.')
        api_id = config['api_id']
        api_hash = config['api_hash']
        user_session = config['user_session']
        self.client = TelegramClient(StringSession(user_session), api_id, api_hash)
        await self.client.start()
        self._register_builtin_commands()
        self.client.add_event_handler(self._handle_message, events.NewMessage(outgoing=True))
        self._running = True
        logger.info('Argent UserBot –∑–∞–ø—É—â–µ–Ω')
        me = await self.client.get_me()
        logger.info(f"–í–æ—à–ª–∏ –∫–∞–∫: {me.first_name} (@{me.username or '–±–µ–∑ username'})")

    def _register_builtin_commands(self):
        self.commands['.help'] = self._cmd_help
        self.commands['.info'] = self._cmd_info
        self.commands['.ping'] = self._cmd_ping
        self.commands['.modules'] = self._cmd_modules

    async def _handle_message(self, event: events.NewMessage.Event):
        text = event.raw_text
        if not text or not text.startswith('.'):
            return
        cmd_parts = text.split()
        cmd = cmd_parts[0].lower()
        args = cmd_parts[1:] if len(cmd_parts) > 1 else []
        if cmd in self.commands:
            try:
                await self.commands[cmd](event, args)
            except Exception as e:
                await event.edit(f'‚ùó –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}')
                logger.exception(f'Command error: {cmd}')

    async def _cmd_help(self, event: events.NewMessage.Event, args: List[str]):
        help_text = '\n\n<b>üîß Argent UserBot ‚Äî –ü–æ–º–æ—â—å</b>\n\n<b>üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n‚Ä¢ <code>.help</code> ‚Äî —ç—Ç–æ –º–µ–Ω—é\n\n‚Ä¢ <code>.info</code> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n‚Ä¢ <code>.ping</code> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n‚Ä¢ <code>.modules</code> ‚Äî —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π\n\n<b>üß∞ –£—Ç–∏–ª–∏—Ç—ã:</b>\n\n‚Ä¢ (–º–æ–¥—É–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ)\n\n<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b>\n\n‚Ä¢ (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–∫–æ—Ä–æ)\n\n<i>–°–æ–≤–µ—Ç: –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</i>\n\n        '
        await event.edit(help_text, parse_mode='html')

    async def _cmd_info(self, event: events.NewMessage.Event, args: List[str]):
        me = await self.client.get_me()
        config = self.store.load_install()
        info_text = f"\n\n<b>‚öôÔ∏è Argent UserBot</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {me.first_name}\n\n<b>Username:</b> @{me.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n<b>ID:</b> <code>{me.id}</code>\n\n<b>–í–µ—Ä—Å–∏—è:</b> 1.0.0\n\n<b>–ú–æ–¥—É–ª–µ–π:</b> {len(self.modules)}\n\n<b>–ö–æ–º–∞–Ω–¥:</b> {len(self.commands)}\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n<b>API ID:</b> <code>{config.get('api_id', 'N/A')}</code>\n\n<b>GitHub:</b> github.com/lonly19/Argent-Userbot\n\n        "
        await event.edit(info_text, parse_mode='html')

    async def _cmd_ping(self, event: events.NewMessage.Event, args: List[str]):
        import time
        start = time.time()
        await event.edit('üèì –ü–æ–Ω–≥!')
        end = time.time()
        ping_ms = round((end - start) * 1000, 2)
        await event.edit(f'üèì <b>–ü–æ–Ω–≥!</b>\n‚ö° <code>{ping_ms}ms</code>', parse_mode='html')

    async def _cmd_modules(self, event: events.NewMessage.Event, args: List[str]):
        if not self.modules:
            await event.edit('üì¶ <b>–ú–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</b>\n\n<i>–°–∏—Å—Ç–µ–º–∞ –º–æ–¥—É–ª–µ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</i>', parse_mode='html')
        else:
            module_list = '\n'.join([f'‚Ä¢ {name}' for name in self.modules.keys()])
            await event.edit(f'üì¶ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n{module_list}', parse_mode='html')

    async def run_until_disconnected(self):
        if not self.client:
            raise RuntimeError('–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        await self.client.run_until_disconnected()

    async def stop(self):
        if self.client:
            await self.client.disconnect()
        self._running = False
        logger.info('Argent UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

async def main():
    import os
    store = SessionStore(base_dir=os.getenv('ARGENT_DATA_DIR', '.argent_data'))
    bot = ArgentUserBot(store)
    try:
        await bot.start()
        print('‚úÖ Argent UserBot –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.')
        await bot.run_until_disconnected()
    except KeyboardInterrupt:
        print('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...')
    except Exception as e:
        print(f'‚ùó –û—à–∏–±–∫–∞: {e}')
    finally:
        await bot.stop()
if __name__ == '__main__':
    asyncio.run(main())
