import asyncio
import time
import random
from datetime import datetime, timedelta
from argent.core.loader import ArgentModule
from telethon.events import NewMessage

class AutoFeaturesModule(ArgentModule):
    __version__ = '1.0.0'
    __author__ = 'github.com/lonly19/Argent-Userbot'
    __category__ = 'utils'

    def __init__(self):
        super().__init__()
        self.description = 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã, —Ä–µ–∞–∫—Ü–∏–∏, —Ä–∞—Å—Å—ã–ª–∫–∏'
        self.register_command('autoreply', self.cmd_autoreply, 'üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç')
        self.register_command('autoreact', self.cmd_autoreact, ' –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏')
        self.register_command('autopm', self.cmd_autopm, 'üì® –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –≤ –õ–°')
        self.register_command('schedule', self.cmd_schedule, '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        self.register_command('broadcast', self.cmd_broadcast, 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π')
        self.register_command('afk', self.cmd_afk, ' –†–µ–∂–∏–º AFK')
        self.register_command('autoread', self.cmd_autoread, 'üëÅÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ—á—Ç–µ–Ω–∏–µ')
        self.register_command('autotype', self.cmd_autotype, '‚å®Ô∏è –ê–≤—Ç–æ-–ø–µ—á–∞—Ç–∞–Ω–∏–µ')
        self.register_command('autoforward', self.cmd_autoforward, '‚ÜóÔ∏è –ê–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∞')
        self.auto_tasks = {}

    async def on_load(self):
        self.client.add_event_handler(self._handle_auto_reply, NewMessage(incoming=True))
        self.client.add_event_handler(self._handle_auto_react, NewMessage)
        asyncio.create_task(self._scheduled_messages_loop())
        self.client.add_event_handler(self._handle_afk, NewMessage(incoming=True))

    async def _handle_auto_reply(self, event):
        auto_replies = self.db.get_config('auto_replies', {})
        for trigger, response in auto_replies.items():
            if trigger.lower() in event.text.lower():
                await asyncio.sleep(random.uniform(1, 3))
                await event.respond(response)
                break

    async def _handle_auto_react(self, event):
        auto_reactions = self.db.get_config('auto_reactions', {})
        if not auto_reactions.get('enabled', False):
            return
        chat_id = event.chat_id
        allowed_chats = auto_reactions.get('chats', [])
        if allowed_chats and chat_id not in allowed_chats:
            return
        chance = auto_reactions.get('chance', 10)
        if random.randint(1, 100) > chance:
            return
        reactions = auto_reactions.get('reactions', ['üëç', '‚ù§Ô∏è', '', 'üî•', '‚ö°'])
        reaction = random.choice(reactions)
        try:
            await asyncio.sleep(random.uniform(2, 5))
            await event.react(reaction)
        except:
            pass

    async def _scheduled_messages_loop(self):
        while True:
            try:
                scheduled = self.db.get_config('scheduled_messages', [])
                current_time = time.time()
                for i, msg in enumerate(scheduled):
                    if msg['time'] <= current_time:
                        try:
                            await self.client.send_message(msg['chat_id'], msg['text'])
                            scheduled.pop(i)
                            self.db.set_config('scheduled_messages', scheduled)
                        except:
                            pass
                await asyncio.sleep(60)
            except:
                await asyncio.sleep(60)

    async def _handle_afk(self, event):
        afk_data = self.db.get_config('afk_mode')
        if not afk_data or not afk_data.get('enabled'):
            return
        if event.sender_id == (await self.client.get_me()).id:
            return
        last_responses = afk_data.get('last_responses', {})
        user_id = str(event.sender_id)
        if user_id in last_responses:
            if time.time() - last_responses[user_id] < 300:
                return
        afk_message = afk_data.get('message', ' –Ø —Å–µ–π—á–∞—Å AFK')
        afk_since = afk_data.get('since', time.time())
        duration = self.utils.format_duration(time.time() - afk_since)
        full_message = f'{afk_message}\n\n‚è∞ AFK —É–∂–µ: {duration}'
        try:
            await event.respond(full_message)
            last_responses[user_id] = time.time()
            afk_data['last_responses'] = last_responses
            self.db.set_config('afk_mode', afk_data)
        except:
            pass

    async def cmd_autoreply(self, event, args):
        if not args:
            auto_replies = self.db.get_config('auto_replies', {})
            if not auto_replies:
                await event.edit('üí¨ <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>')
                return
            reply_text = 'üí¨ <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã:</b>\n\n'
            for trigger, response in auto_replies.items():
                reply_text += f'<b>–¢—Ä–∏–≥–≥–µ—Ä:</b> <code>{trigger}</code>\n<b>–û—Ç–≤–µ—Ç:</b> {response}\n\n'
            reply_text += '<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n'
            reply_text += '‚Ä¢ `.autoreply add <—Ç—Ä–∏–≥–≥–µ—Ä> | <–æ—Ç–≤–µ—Ç>` - –¥–æ–±–∞–≤–∏—Ç—å\n'
            reply_text += '‚Ä¢ `.autoreply remove <—Ç—Ä–∏–≥–≥–µ—Ä>` - —É–¥–∞–ª–∏—Ç—å\n'
            reply_text += '‚Ä¢ <code>.autoreply clear</code> - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ'
            await event.edit(reply_text)
            return
        action = args[0].lower()
        if action == 'add':
            if len(args) < 2 or '|' not in ' '.join(args[1:]):
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autoreply add <—Ç—Ä–∏–≥–≥–µ—Ä> | <–æ—Ç–≤–µ—Ç>`')
                return
            content = ' '.join(args[1:])
            trigger, response = content.split('|', 1)
            trigger = trigger.strip()
            response = response.strip()
            auto_replies = self.db.get_config('auto_replies', {})
            auto_replies[trigger] = response
            self.db.set_config('auto_replies', auto_replies)
            await event.edit(f'\n\n‚úÖ <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n<b>üéØ –¢—Ä–∏–≥–≥–µ—Ä:</b> <code>{trigger}</code>\n\n<b>üí¨ –û—Ç–≤–µ—Ç:</b> {response}\n\n<b>‚öõÔ∏è –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä</b>\n\n            ')
        elif action == 'remove':
            if len(args) < 2:
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autoreply remove <—Ç—Ä–∏–≥–≥–µ—Ä>`')
                return
            trigger = ' '.join(args[1:])
            auto_replies = self.db.get_config('auto_replies', {})
            if trigger in auto_replies:
                del auto_replies[trigger]
                self.db.set_config('auto_replies', auto_replies)
                await event.edit(f'‚úÖ <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç <code>{trigger}</code> —É–¥–∞–ª–µ–Ω</b>')
            else:
                await event.edit(f'‚ùå <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç <code>{trigger}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')
        elif action == 'clear':
            self.db.set_config('auto_replies', {})
            await event.edit('‚úÖ <b>–í—Å–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –æ—á–∏—â–µ–Ω—ã</b>')

    async def cmd_autoreact(self, event, args):
        if not args:
            auto_reactions = self.db.get_config('auto_reactions', {})
            status = '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_reactions.get('enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'
            chance = auto_reactions.get('chance', 10)
            reactions = auto_reactions.get('reactions', ['üëç', '‚ù§Ô∏è', ''])
            await event.edit(f"\n\n **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π**\n\n**üìä –°—Ç–∞—Ç—É—Å:** {status}\n\n**üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {chance}%\n\n** –†–µ–∞–∫—Ü–∏–∏:** {' '.join(reactions)}\n\n**üîß –ö–æ–º–∞–Ω–¥—ã:**\n\n‚Ä¢ `.autoreact on/off` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n\n‚Ä¢ `.autoreact chance <—á–∏—Å–ª–æ>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å\n\n‚Ä¢ `.autoreact reactions <—ç–º–æ–¥–∑–∏>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\n\n            ")
            return
        action = args[0].lower()
        if action in ['on', 'enable']:
            auto_reactions = self.db.get_config('auto_reactions', {})
            auto_reactions['enabled'] = True
            self.db.set_config('auto_reactions', auto_reactions)
            await event.edit('‚úÖ <b>–ê–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã</b>')
        elif action in ['off', 'disable']:
            auto_reactions = self.db.get_config('auto_reactions', {})
            auto_reactions['enabled'] = False
            self.db.set_config('auto_reactions', auto_reactions)
            await event.edit('‚ùå <b>–ê–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>')
        elif action == 'chance':
            if len(args) < 2:
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autoreact chance <—á–∏—Å–ª–æ>`')
                return
            try:
                chance = int(args[1])
                if not 1 <= chance <= 100:
                    await event.edit('‚ùå <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100</b>')
                    return
                auto_reactions = self.db.get_config('auto_reactions', {})
                auto_reactions['chance'] = chance
                self.db.set_config('auto_reactions', auto_reactions)
                await event.edit(f'‚úÖ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–≤—Ç–æ-—Ä–µ–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {chance}%</b>')
            except ValueError:
                await event.edit('‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b>')
        elif action == 'reactions':
            if len(args) < 2:
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autoreact reactions <—ç–º–æ–¥–∑–∏>`')
                return
            reactions = args[1:]
            auto_reactions = self.db.get_config('auto_reactions', {})
            auto_reactions['reactions'] = reactions
            self.db.set_config('auto_reactions', auto_reactions)
            await event.edit(f"‚úÖ <b>–†–µ–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b> {' '.join(reactions)}")

    async def cmd_autopm(self, event, args):
        if not args:
            autopm = self.db.get_config('autopm', {})
            if not autopm.get('enabled'):
                await event.edit('üì® <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –≤ –õ–° –æ—Ç–∫–ª—é—á–µ–Ω</b>')
                return
            message = autopm.get('message', '–ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å.')
            await event.edit(f'\n\nüì® **–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –≤ –õ–°**\n\n**üìù –°–æ–æ–±—â–µ–Ω–∏–µ:**\n\n{message}\n\n**üîß –ö–æ–º–∞–Ω–¥—ã:**\n\n‚Ä¢ `.autopm on` - –≤–∫–ª—é—á–∏—Ç—å\n\n‚Ä¢ `.autopm off` - –≤—ã–∫–ª—é—á–∏—Ç—å\n\n‚Ä¢ `.autopm set <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n            ')
            return
        action = args[0].lower()
        if action == 'on':
            autopm = self.db.get_config('autopm', {})
            autopm['enabled'] = True
            if 'message' not in autopm:
                autopm['message'] = 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
            self.db.set_config('autopm', autopm)
            await event.edit('‚úÖ <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –≤ –õ–° –≤–∫–ª—é—á–µ–Ω</b>')
        elif action == 'off':
            autopm = self.db.get_config('autopm', {})
            autopm['enabled'] = False
            self.db.set_config('autopm', autopm)
            await event.edit('‚ùå <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –≤ –õ–° –æ—Ç–∫–ª—é—á–µ–Ω</b>')
        elif action == 'set':
            if len(args) < 2:
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autopm set <—Å–æ–æ–±—â–µ–Ω–∏–µ>`')
                return
            message = ' '.join(args[1:])
            autopm = self.db.get_config('autopm', {})
            autopm['message'] = message
            self.db.set_config('autopm', autopm)
            await event.edit(f'‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:</b>\n\n{message}')

    async def cmd_schedule(self, event, args):
        if not args:
            scheduled = self.db.get_config('scheduled_messages', [])
            if not scheduled:
                await event.edit('‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç</b>')
                return
            schedule_text = '‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'
            for i, msg in enumerate(scheduled, 1):
                send_time = datetime.fromtimestamp(msg['time']).strftime('%Y-%m-%d %H:%M')
                schedule_text += f"<b>{i}.</b> {send_time}\nüìù {msg['text'][:50]}...\n\n"
            await event.edit(schedule_text)
            return
        if len(args) < 3:
            await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.schedule <–≤—Ä–µ–º—è> <—á–∞—Ç_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n**–ü—Ä–∏–º–µ—Ä:** `.schedule 2h @username –ü—Ä–∏–≤–µ—Ç!`')
            return
        time_str = args[0]
        chat_id = args[1]
        message = ' '.join(args[2:])
        if time_str.endswith(('m', 'h', 'd')):
            duration = self.utils.parse_duration(time_str)
            if not duration:
                await event.edit('‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>')
                return
            send_time = time.time() + duration
        else:
            await event.edit('‚ùå <b>—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 30m, 2h, 1d</b>')
            return
        try:
            if chat_id.startswith('@'):
                entity = await self.client.get_entity(chat_id)
                chat_id = entity.id
            else:
                chat_id = int(chat_id)
        except:
            await event.edit('‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç</b>')
            return
        scheduled = self.db.get_config('scheduled_messages', [])
        scheduled.append({'time': send_time, 'chat_id': chat_id, 'text': message})
        self.db.set_config('scheduled_messages', scheduled)
        send_date = datetime.fromtimestamp(send_time).strftime('%Y-%m-%d %H:%M:%S')
        await event.edit(f'\n\n‚è∞ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n<b>üìÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {send_date}\n\n<b>üí¨ –ß–∞—Ç:</b> <code>{chat_id}</code>\n\n<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}\n\n<b>‚öõÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>\n\n        ')

    async def cmd_broadcast(self, event, args):
        if not args:
            await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>`')
            return
        message = ' '.join(args)
        await event.edit('üì¢ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>')
        dialogs = await self.client.get_dialogs()
        sent = 0
        failed = 0
        for dialog in dialogs:
            try:
                if dialog.is_user and (not dialog.entity.bot):
                    await self.client.send_message(dialog.entity, message)
                    sent += 1
                    await asyncio.sleep(1)
            except:
                failed += 1
        await event.edit(f'\n\nüì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n<b>‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent}\n\n<b>‚ùå –û—à–∏–±–æ–∫:</b> {failed}\n\n<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message[:100]}...\n\n<b>‚öõÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</b>\n\n        ')

    async def cmd_afk(self, event, args):
        if not args:
            afk_data = self.db.get_config('afk_mode')
            if not afk_data or not afk_data.get('enabled'):
                await event.edit(' <b>AFK —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω</b>')
                return
            since = afk_data.get('since', time.time())
            duration = self.utils.format_duration(time.time() - since)
            message = afk_data.get('message', '–Ø —Å–µ–π—á–∞—Å AFK')
            await event.edit(f'\n\n **AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω**\n\n**üìù –°–æ–æ–±—â–µ–Ω–∏–µ:** {message}\n\n**‚è∞ AFK —É–∂–µ:** {duration}\n\n**üîß –ö–æ–º–∞–Ω–¥—ã:**\n\n‚Ä¢ `.afk off` - –æ—Ç–∫–ª—é—á–∏—Ç—å\n\n‚Ä¢ `.afk <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n            ')
            return
        if args[0].lower() == 'off':
            self.db.set_config('afk_mode', {'enabled': False})
            await event.edit('‚úÖ <b>AFK —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω</b>')
            return
        message = ' '.join(args)
        afk_data = {'enabled': True, 'message': message, 'since': time.time(), 'last_responses': {}}
        self.db.set_config('afk_mode', afk_data)
        await event.edit(f"\n\n <b>AFK —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω</b>\n\n<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}\n\n<b>‚è∞ –ù–∞—á–∞–ª–æ:</b> {datetime.now().strftime('%H:%M:%S')}\n\n<b>‚öõÔ∏è –ë—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n        ")

    async def cmd_autoread(self, event, args):
        if not args:
            autoread = self.db.get_config('autoread', False)
            status = '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if autoread else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'
            await event.edit(f'\n\nüëÅÔ∏è <b>–ê–≤—Ç–æ-–ø—Ä–æ—á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n<b>üìä –°—Ç–∞—Ç—É—Å:</b> {status}\n\n<b>üîß –ö–æ–º–∞–Ω–¥—ã:</b>\n\n‚Ä¢ <code>.autoread on</code> - –≤–∫–ª—é—á–∏—Ç—å\n\n‚Ä¢ <code>.autoread off</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å\n\n<b>‚öõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</b>\n\n            ')
            return
        action = args[0].lower()
        if action == 'on':
            self.db.set_config('autoread', True)
            await event.edit('‚úÖ <b>–ê–≤—Ç–æ-–ø—Ä–æ—á—Ç–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</b>')
        elif action == 'off':
            self.db.set_config('autoread', False)
            await event.edit('‚ùå <b>–ê–≤—Ç–æ-–ø—Ä–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>')

    async def cmd_autotype(self, event, args):
        if not args:
            autotype = self.db.get_config('autotype', {})
            if not autotype.get('enabled'):
                await event.edit('‚å®Ô∏è <b>–ê–≤—Ç–æ-–ø–µ—á–∞—Ç–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>')
                return
            duration = autotype.get('duration', 5)
            await event.edit(f'\n\n‚å®Ô∏è **–ê–≤—Ç–æ-–ø–µ—á–∞—Ç–∞–Ω–∏–µ**\n\n**üìä –°—Ç–∞—Ç—É—Å:** ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n\n**‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration} —Å–µ–∫—É–Ω–¥\n\n**üîß –ö–æ–º–∞–Ω–¥—ã:**\n\n‚Ä¢ `.autotype on <—Å–µ–∫—É–Ω–¥—ã>` - –≤–∫–ª—é—á–∏—Ç—å\n\n‚Ä¢ `.autotype off` - –æ—Ç–∫–ª—é—á–∏—Ç—å\n\n**‚öõÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n            ')
            return
        action = args[0].lower()
        if action == 'on':
            duration = 5
            if len(args) > 1:
                try:
                    duration = int(args[1])
                    if not 1 <= duration <= 30:
                        duration = 5
                except:
                    duration = 5
            autotype = {'enabled': True, 'duration': duration}
            self.db.set_config('autotype', autotype)
            await event.edit(f'‚úÖ <b>–ê–≤—Ç–æ-–ø–µ—á–∞—Ç–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥</b>')
        elif action == 'off':
            self.db.set_config('autotype', {'enabled': False})
            await event.edit('‚ùå <b>–ê–≤—Ç–æ-–ø–µ—á–∞—Ç–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>')

    async def cmd_autoforward(self, event, args):
        if not args:
            autoforward = self.db.get_config('autoforward', {})
            if not autoforward:
                await event.edit('‚ÜóÔ∏è <b>–ê–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>')
                return
            forward_text = '‚ÜóÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∏:</b>\n\n'
            for source, target in autoforward.items():
                forward_text += f'<b>–∑:</b> <code>{source}</code>\n<b>–í:</b> <code>{target}</code>\n\n'
            forward_text += '<b>üîß –ö–æ–º–∞–Ω–¥—ã:</b>\n'
            forward_text += '‚Ä¢ `.autoforward add <–∏—Å—Ç–æ—á–Ω–∏–∫> <—Ü–µ–ª—å>` - –¥–æ–±–∞–≤–∏—Ç—å\n'
            forward_text += '‚Ä¢ `.autoforward remove <–∏—Å—Ç–æ—á–Ω–∏–∫>` - —É–¥–∞–ª–∏—Ç—å'
            await event.edit(forward_text)
            return
        action = args[0].lower()
        if action == 'add':
            if len(args) < 3:
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autoforward add <–∏—Å—Ç–æ—á–Ω–∏–∫> <—Ü–µ–ª—å>`')
                return
            source = args[1]
            target = args[2]
            try:
                if source.startswith('@'):
                    source_entity = await self.client.get_entity(source)
                    source_id = source_entity.id
                else:
                    source_id = int(source)
                if target.startswith('@'):
                    target_entity = await self.client.get_entity(target)
                    target_id = target_entity.id
                else:
                    target_id = int(target)
            except:
                await event.edit('‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ —á–∞—Ç–æ–≤</b>')
                return
            autoforward = self.db.get_config('autoforward', {})
            autoforward[str(source_id)] = target_id
            self.db.set_config('autoforward', autoforward)
            await event.edit(f'\n\n‚úÖ <b>–ê–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>\n\n<b>üì• —Å—Ç–æ—á–Ω–∏–∫:</b> <code>{source_id}</code>\n\n<b>üì§ –¶–µ–ª—å:</b> <code>{target_id}</code>\n\n<b>‚öõÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ —Ü–µ–ª—å</b>\n\n            ')
        elif action == 'remove':
            if len(args) < 2:
                await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.autoforward remove <–∏—Å—Ç–æ—á–Ω–∏–∫>`')
                return
            source = args[1]
            try:
                if source.startswith('@'):
                    source_entity = await self.client.get_entity(source)
                    source_id = str(source_entity.id)
                else:
                    source_id = source
            except:
                source_id = source
            autoforward = self.db.get_config('autoforward', {})
            if source_id in autoforward:
                del autoforward[source_id]
                self.db.set_config('autoforward', autoforward)
                await event.edit(f'‚úÖ <b>–ê–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ <code>{source_id}</code> —É–¥–∞–ª–µ–Ω–∞</b>')
            else:
                await event.edit(f'‚ùå <b>–ê–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ <code>{source_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>')
module = AutoFeaturesModule()
