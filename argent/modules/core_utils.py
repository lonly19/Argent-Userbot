import time
import asyncio
from argent.core.loader import ArgentModule

class CoreUtilsModule(ArgentModule):
    __version__ = '1.0.0'
    __author__ = 'github.com/lonly19/Argent-Userbot'
    __category__ = 'core'

    def __init__(self):
        super().__init__()
        self.description = 'üß™ –ë–∞–∑–æ–≤—ã–µ –Ω–∞—É—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
        self.register_command('test', self.cmd_test, 'üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞')
        self.register_command('echo', self.cmd_echo, 'üì¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        self.register_command('calc', self.cmd_calc, 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
        self.register_command('time', self.cmd_time, 'üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è')
        self.register_command('uptime', self.cmd_uptime, '‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã')
        self.register_command('setprefix', self.cmd_setprefix, 'üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥')

    async def on_load(self):
        self.start_time = time.time()

    async def cmd_test(self, event, args):
        await event.edit('‚öóÔ∏è <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>\nüî¨ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ')

    async def cmd_echo(self, event, args):
        if not args:
            await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.echo <—Ç–µ–∫—Å—Ç>`')
            return
        text = ' '.join(args)
        await event.edit(f'üì¢ <b>–≠—Ö–æ:</b> {text}')

    async def cmd_calc(self, event, args):
        if not args:
            await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.calc <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>`')
            return
        expression = ' '.join(args)
        try:
            allowed_chars = '0123456789+-*/.() '
            if not all((c in allowed_chars for c in expression)):
                await event.edit('‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏')
                return
            result = eval(expression)
            await event.edit(f'\n\nüßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n<b>üìù –í—ã—Ä–∞–∂–µ–Ω–∏–µ:</b> <code>{expression}</code>\n\n<b>üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <code>{result}</code>\n\n<b>üî¨ –¢–∏–ø:</b> <code>{type(result).__name__}</code>\n\n')
        except Exception as e:
            await event.edit(f'‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:</b> <code>{str(e)}</code>')

    async def cmd_time(self, event, args):
        current_time = time.time()
        formatted_time = self.utils.format_timestamp(int(current_time), '%Y-%m-%d %H:%M:%S')
        await event.edit(f'\n\nüïê <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n<b>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> <code>{formatted_time}</code>\n\n<b>‚è∞ Unix timestamp:</b> <code>{int(current_time)}</code>\n\n<b>üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> <code>UTC+3</code>\n\n')

    async def cmd_uptime(self, event, args):
        if not hasattr(self, 'start_time'):
            self.start_time = time.time()
        uptime_seconds = time.time() - self.start_time
        uptime_str = self.utils.format_duration(uptime_seconds)
        await event.edit(f'\n\n‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è</b>\n\n<b>üöÄ –ó–∞–ø—É—â–µ–Ω:</b> {self.utils.format_timestamp(int(self.start_time))}\n\n<b>‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç:</b> <code>{uptime_str}</code>\n\n<b>üî¨ –°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n')

    async def cmd_setprefix(self, event, args):
        if not args:
            current_prefix = getattr(self.client, 'command_prefix', '.')
            await event.edit(f'\nüîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º</b>\n\n<b>üìù –¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å:</b> <code>{current_prefix}</code>\n\n<b>üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.setprefix &lt;–Ω–æ–≤—ã–π_–ø—Ä–µ—Ñ–∏–∫—Å&gt;</code>\n\n<b>üìã –ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ <code>.setprefix !</code>\n‚Ä¢ <code>.setprefix /</code>\n‚Ä¢ <code>.setprefix .</code>\n')
            return
        new_prefix = args[0]
        if len(new_prefix) > 3:
            await event.edit('‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤')
            return
        if not new_prefix.strip():
            await event.edit('‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
            return
        self.client.command_prefix = new_prefix
        await event.edit(f'\n‚úÖ <b>–ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n<b>üîß –ù–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å:</b> <code>{new_prefix}</code>\n\n<b>üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> <code>{new_prefix}help</code>\n\n<b>‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞\n')
module = CoreUtilsModule()
