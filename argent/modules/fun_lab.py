import random
import asyncio
from argent.core.loader import ArgentModule

class FunLabModule(ArgentModule):
    __version__ = '1.0.0'
    __author__ = 'github.com/lonly19/Argent-Userbot'
    __category__ = 'fun'

    def __init__(self):
        super().__init__()
        self.description = 'üé≠ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤'
        self.register_command('dice', self.cmd_dice, 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫')
        self.register_command('coin', self.cmd_coin, 'ü™ô –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É')
        self.register_command('random', self.cmd_random, 'üîÄ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ')
        self.register_command('choose', self.cmd_choose, 'üéØ –í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç')
        self.register_command('reverse', self.cmd_reverse, 'üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç')
        self.register_command('mock', self.cmd_mock, 'ü§° –ú–æ–ö–∏–ù–≥ –¢–µ–ö—Å–¢')
        self.register_command('chemistry', self.cmd_chemistry, '‚öóÔ∏è –•–∏–º–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è')
        self.register_command('experiment', self.cmd_experiment, 'üß™ –ù–∞—É—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç')

    async def cmd_dice(self, event, args):
        sides = 6
        count = 1
        if args:
            try:
                if len(args) == 1:
                    if 'd' in args[0]:
                        count, sides = map(int, args[0].split('d'))
                    else:
                        sides = int(args[0])
                elif len(args) == 2:
                    count, sides = (int(args[0]), int(args[1]))
            except ValueError:
                await event.edit('‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.dice [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–≥—Ä–∞–Ω–µ–π]</code> –∏–ª–∏ <code>.dice 2d6</code>')
                return
        if count > 10 or sides > 100:
            await event.edit('‚ùå <b>–õ–∏–º–∏—Ç:</b> –º–∞–∫—Å–∏–º—É–º 10 –∫—É–±–∏–∫–æ–≤ –ø–æ 100 –≥—Ä–∞–Ω–µ–π')
            return
        results = [random.randint(1, sides) for _ in range(count)]
        total = sum(results)
        dice_emoji = 'üé≤' * min(count, 5)
        result_text = f"\n\n{dice_emoji} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞</b>\n\n<b>üéØ –ö—É–±–∏–∫–æ–≤:</b> <code>{count}</code> –ø–æ <code>{sides}</code> –≥—Ä–∞–Ω–µ–π\n\n<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> <code>{', '.join(map(str, results))}</code>\n\n<b>üßÆ –°—É–º–º–∞:</b> <code>{total}</code>\n\n<b>üìà –°—Ä–µ–¥–Ω–µ–µ:</b> <code>{total / count:.1f}</code>\n\n"
        await event.edit(result_text)

    async def cmd_coin(self, event, args):
        count = 1
        if args:
            try:
                count = int(args[0])
                if count > 20:
                    count = 20
            except ValueError:
                pass
        results = []
        heads = 0
        tails = 0
        for _ in range(count):
            result = random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])
            results.append(result)
            if result == '–û—Ä–µ–ª':
                heads += 1
            else:
                tails += 1
        coin_emoji = 'ü™ô' * min(count, 5)
        result_text = f"\n\n{coin_emoji} <b>–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã</b>\n\n<b>üéØ –ë—Ä–æ—Å–∫–æ–≤:</b> <code>{count}</code>\n\n<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> <code>{', '.join(results)}</code>\n\n<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n‚Ä¢ ü¶Ö <b>–û—Ä–µ–ª:</b> <code>{heads}</code> ({self.utils.format_percentage(heads, count)}%)\n\n‚Ä¢ üèõÔ∏è <b>–†–µ—à–∫–∞:</b> <code>{tails}</code> ({self.utils.format_percentage(tails, count)}%)\n\n"
        await event.edit(result_text)

    async def cmd_random(self, event, args):
        min_val = 1
        max_val = 100
        if len(args) == 1:
            try:
                max_val = int(args[0])
            except ValueError:
                pass
        elif len(args) == 2:
            try:
                min_val, max_val = (int(args[0]), int(args[1]))
            except ValueError:
                pass
        if min_val >= max_val:
            await event.edit('‚ùå <b>–ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞</b>')
            return
        result = random.randint(min_val, max_val)
        await event.edit(f'\n\nüîÄ <b>–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ</b>\n\n<b>üìä –î–∏–∞–ø–∞–∑–æ–Ω:</b> <code>{min_val}</code> - <code>{max_val}</code>\n\n<b>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <code>{result}</code>\n\n<b>üß™ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</b> <code>1/{max_val - min_val + 1}</code>\n\n')

    async def cmd_choose(self, event, args):
        if not args:
            await event.edit('‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.choose –≤–∞—Ä–∏–∞–Ω—Ç1 –≤–∞—Ä–∏–∞–Ω—Ç2 –≤–∞—Ä–∏–∞–Ω—Ç3...</code>')
            return
        choice = random.choice(args)
        await event.edit(f'\n\nüéØ <b>–ù–∞—É—á–Ω—ã–π –≤—ã–±–æ—Ä</b>\n\n<b>üß™ –í–∞—Ä–∏–∞–Ω—Ç—ã:</b> <code>{len(args)}</code>\n\n<b>‚öõÔ∏è –í—ã–±–æ—Ä:</b> <b>{choice}</b>\n\n<b>üî¨ –ú–µ—Ç–æ–¥:</b> –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å\n\n')

    async def cmd_reverse(self, event, args):
        if not args:
            await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.reverse <—Ç–µ–∫—Å—Ç>`')
            return
        text = ' '.join(args)
        reversed_text = text[::-1]
        await event.edit(f'\n\nüîÑ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n<b>üìù –û—Ä–∏–≥–∏–Ω–∞–ª:</b> <code>{text}</code>\n\n<b>üîÑ –û–±—Ä–∞—â–µ–Ω–Ω—ã–π:</b> <code>{reversed_text}</code>\n\n<b>üß¨ –î–ª–∏–Ω–∞:</b> <code>{len(text)}</code> —Å–∏–º–≤–æ–ª–æ–≤\n\n')

    async def cmd_mock(self, event, args):
        if not args:
            await event.edit('‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.mock <—Ç–µ–∫—Å—Ç>`')
            return
        text = ' '.join(args)
        mocked = ''
        for i, char in enumerate(text):
            if char.isalpha():
                mocked += char.upper() if i % 2 == 0 else char.lower()
            else:
                mocked += char
        await event.edit(f'\n\nü§° <b>–ú–æ–ö–∏–ù–≥ –¢–µ–ö—Å–¢</b>\n\n<b>üìù –û—Ä–∏–≥–∏–Ω–∞–ª:</b> {text}\n\n<b>ü§° –ú–æ–ö–∏–ù–≥:</b> {mocked}\n\n<b>üß™ –ê–ª–≥–æ—Ä–∏—Ç–º:</b> –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞\n\n')

    async def cmd_chemistry(self, event, args):
        reactions = [('H‚ÇÇ + Cl‚ÇÇ', '2HCl', '–°–∏–Ω—Ç–µ–∑ —Ö–ª–æ—Ä–æ–≤–æ–¥–æ—Ä–æ–¥–∞'), ('2H‚ÇÇ + O‚ÇÇ', '2H‚ÇÇO', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã'), ('CH‚ÇÑ + 2O‚ÇÇ', 'CO‚ÇÇ + 2H‚ÇÇO', '–ì–æ—Ä–µ–Ω–∏–µ –º–µ—Ç–∞–Ω–∞'), ('CaCO‚ÇÉ', 'CaO + CO‚ÇÇ', '–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä–±–æ–Ω–∞—Ç–∞ –∫–∞–ª—å—Ü–∏—è'), ('Fe + S', 'FeS', '–°–∏–Ω—Ç–µ–∑ —Å—É–ª—å—Ñ–∏–¥–∞ –∂–µ–ª–µ–∑–∞'), ('2Na + Cl‚ÇÇ', '2NaCl', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–≤–∞—Ä–µ–Ω–Ω–æ–π —Å–æ–ª–∏'), ('Mg + 2HCl', 'MgCl‚ÇÇ + H‚ÇÇ', '–†–µ–∞–∫—Ü–∏—è –º–∞–≥–Ω–∏—è —Å –∫–∏—Å–ª–æ—Ç–æ–π'), ('C + O‚ÇÇ', 'CO‚ÇÇ', '–ì–æ—Ä–µ–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–∞')]
        reactants, products, description = random.choice(reactions)
        await event.edit(f"\n\n‚öóÔ∏è <b>–•–∏–º–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è</b>\n\n<b>üß™ –†–µ–∞–≥–µ–Ω—Ç—ã:</b> <code>{reactants}</code>\n\n<b>‚û°Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã:</b> <code>{products}</code>\n\n<b>üìã –û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n<b>üî¨ –¢–∏–ø:</b> {random.choice(['–°–∏–Ω—Ç–µ–∑', '–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ', '–ó–∞–º–µ—â–µ–Ω–∏–µ', '–û–±–º–µ–Ω'])}\n\n<b>üå°Ô∏è –£—Å–ª–æ–≤–∏—è:</b> {random.choice(['–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ', '–ù–∞–≥—Ä–µ–≤–∞–Ω–∏–µ', '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä', '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ'])}\n\n")

    async def cmd_experiment(self, event, args):
        experiments = [{'name': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ pH —Ä–∞—Å—Ç–≤–æ—Ä–∞', 'materials': ['–õ–∞–∫–º—É—Å–æ–≤–∞—è –±—É–º–∞–≥–∞', '—Å—Å–ª–µ–¥—É–µ–º—ã–π —Ä–∞—Å—Ç–≤–æ—Ä', '–≠—Ç–∞–ª–æ–Ω–Ω–∞—è —à–∫–∞–ª–∞'], 'result': f'pH = {random.uniform(1, 14):.1f}', 'conclusion': random.choice(['–ö–∏—Å–ª–∞—è —Å—Ä–µ–¥–∞', '–©–µ–ª–æ—á–Ω–∞—è —Å—Ä–µ–¥–∞', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞'])}, {'name': '–∑–º–µ—Ä–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—â–µ—Å—Ç–≤–∞', 'materials': ['–í–µ—Å—ã', '–ú–µ—Ä–Ω—ã–π —Ü–∏–ª–∏–Ω–¥—Ä', '—Å—Å–ª–µ–¥—É–µ–º–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ'], 'result': f'œÅ = {random.uniform(0.5, 5.0):.2f} –≥/—Å–º¬≥', 'conclusion': random.choice(['–õ–µ–≥—á–µ –≤–æ–¥—ã', '–¢—è–∂–µ–ª–µ–µ –≤–æ–¥—ã', '–ë–ª–∏–∑–∫–æ –∫ –≤–æ–¥–µ'])}, {'name': '–ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è', 'materials': ['–°–ø–µ–∫—Ç—Ä–æ—Ñ–æ—Ç–æ–º–µ—Ç—Ä', '–û–±—Ä–∞–∑–µ—Ü', '–ö—é–≤–µ—Ç–∞'], 'result': f'Œªmax = {random.randint(400, 700)} –Ω–º', 'conclusion': random.choice(['–°–∏–Ω–∏–π —Å–ø–µ–∫—Ç—Ä', '–ö—Ä–∞—Å–Ω—ã–π —Å–ø–µ–∫—Ç—Ä', '–ó–µ–ª–µ–Ω—ã–π —Å–ø–µ–∫—Ç—Ä'])}]
        experiment = random.choice(experiments)
        await event.edit(f"\n\nüß™ <b>–ù–∞—É—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b>\n\n<b>üìã –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {experiment['name']}\n\n<b>üî¨ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n\n{chr(10).join([f'‚Ä¢ {material}' for material in experiment['materials']])}\n\n<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <code>{experiment['result']}</code>\n\n<b>üéØ –í—ã–≤–æ–¥:</b> {experiment['conclusion']}\n\n<b>‚öõÔ∏è –°—Ç–∞—Ç—É—Å:</b> –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n")
module = FunLabModule()
