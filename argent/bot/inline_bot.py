from __future__ import annotations
import asyncio
import logging
from typing import Optional
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
try:
    from aiogram.client.default import DefaultBotProperties
except Exception:
    DefaultBotProperties = None
from ..storage.database import ArgentDatabase
from ..security.owner_manager import OwnerManager
logger = logging.getLogger(__name__)

class ArgentInlineBot:

    def __init__(self, bot_token: str, db: ArgentDatabase, userbot_client=None):
        self.bot_token = bot_token
        self.db = db
        self.userbot_client = userbot_client
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self._running = False
        self.owner_manager = OwnerManager()

    async def start(self):
        try:
            if DefaultBotProperties is not None:
                self.bot = Bot(token=self.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            else:
                self.bot = Bot(token=self.bot_token, parse_mode=ParseMode.HTML)
        except TypeError:
            self.bot = Bot(token=self.bot_token, parse_mode=ParseMode.HTML)
        except Exception:
            self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
        self._bind_handlers()
        await self._send_initial_setup()
        self._running = True
        logger.info('ü§ñ Inline bot started')
        asyncio.create_task(self.dp.start_polling(self.bot, handle_signals=False))

    def _bind_handlers(self):

        def owner_required(handler):

            async def wrapper(callback_or_message):
                user_id = callback_or_message.from_user.id
                if not self.owner_manager.is_owner(user_id):
                    if hasattr(callback_or_message, 'answer'):
                        await callback_or_message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', show_alert=True)
                    else:
                        await callback_or_message.answer('‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\nüîí –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                    return
                return await handler(callback_or_message)
            return wrapper

        @self.dp.message(CommandStart())
        async def handle_start(message: Message):
            user_id = message.from_user.id
            username = message.from_user.username or 'Unknown'
            first_name = message.from_user.first_name or 'Unknown'
            if not self.owner_manager.has_primary_owner():
                if self.owner_manager.set_primary_owner(user_id):
                    self.db.set_config('owners', [user_id])
                    await message.answer(f'üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–ª–∞–¥–µ–ª–µ—Ü!</b>\n\nüëë <b>–í—ã —Å—Ç–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Argent UserBot</b>\nüÜî <b>–í–∞—à ID:</b> <code>{user_id}</code>\nüë§ <b>–ò–º—è:</b> {first_name}\nüì± <b>Username:</b> @{username}\n\nüîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n‚Ä¢ –¢–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º\n‚Ä¢ –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ\n‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüöÄ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!</b>', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data='main_menu')]]))
                    return
            if not self.owner_manager.is_owner(user_id):
                await message.answer(f'‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\nüîí <b>–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\nüí° <b>–•–æ—Ç–∏—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç?</b>\nüìÇ GitHub: github.com/lonly19/Argent-Userbot')
                return
            await self._show_main_menu(message)

        @self.dp.callback_query(F.data == 'main_menu')
        @owner_required
        async def handle_main_menu(cb: CallbackQuery):
            await self._show_main_menu(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'settings')
        @owner_required
        async def handle_settings(cb: CallbackQuery):
            await self._show_settings_menu(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'restart_settings')
        @owner_required
        async def handle_restart_settings(cb: CallbackQuery):
            await self._show_restart_settings(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data.startswith('set_restart_'))
        @owner_required
        async def handle_set_restart(cb: CallbackQuery):
            try:
                hours = cb.data.split('_')[2]
            except (IndexError, ValueError):
                await cb.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', show_alert=True)
                return
            if hours == 'off':
                self.db.set_config('auto_restart_hours', None)
                await cb.message.edit_text('‚è∞ <b>–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>', reply_markup=self._get_back_keyboard())
            else:
                try:
                    hours = int(hours)
                    if hours <= 0 or hours > 168:
                        await cb.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (1-168 —á–∞—Å–æ–≤)', show_alert=True)
                        return
                except ValueError:
                    await cb.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤', show_alert=True)
                    return
                self.db.set_config('auto_restart_hours', hours)
                await cb.message.edit_text(f'‚úÖ <b>–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>\n\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {hours} —á–∞—Å–æ–≤', reply_markup=self._get_back_keyboard())
            await cb.answer()

        @self.dp.callback_query(F.data == 'language_settings')
        @owner_required
        async def handle_language_settings(cb: CallbackQuery):
            await self._show_language_settings(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data.startswith('set_lang_'))
        @owner_required
        async def handle_set_language(cb: CallbackQuery):
            try:
                lang = cb.data.split('_')[2]
                if lang not in ['ru', 'en', 'uk', 'de', 'fr']:
                    await cb.answer('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫', show_alert=True)
                    return
            except (IndexError, ValueError):
                await cb.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', show_alert=True)
                return
            self.db.set_config('language', lang)
            lang_names = {'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'en': 'üá∫üá∏ English', 'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'de': 'üá©üá™ Deutsch', 'fr': 'üá´üá∑ Fran√ßais'}
            await self._safe_edit(cb.message, f'‚úÖ <b>–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω</b>\n\nüåç –ù–æ–≤—ã–π —è–∑—ã–∫: {lang_names[lang]}', reply_markup=self._get_back_keyboard())
            await cb.answer()

        @self.dp.callback_query(F.data == 'modules_menu')
        @owner_required
        async def handle_modules_menu(cb: CallbackQuery):
            await self._show_modules_menu(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'list_modules')
        @owner_required
        async def handle_list_modules(cb: CallbackQuery):
            await self._show_modules_menu(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'reload_all_modules')
        @owner_required
        async def handle_reload_all_modules(cb: CallbackQuery):
            await self._safe_edit(cb.message, 'üîÑ <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...</b>\n<blockquote>–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.</blockquote>', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='modules_menu')]]))
            await cb.answer()

        @self.dp.callback_query(F.data == 'system_info')
        @owner_required
        async def handle_system_info(cb: CallbackQuery):
            await self._show_system_info(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'restart_userbot')
        @owner_required
        async def handle_restart_userbot(cb: CallbackQuery):
            await self._safe_edit(cb.message, 'üîÑ <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ UserBot...</b>')
            await cb.answer()

        @self.dp.callback_query(F.data == 'owner_management')
        @owner_required
        async def handle_owner_management(cb: CallbackQuery):
            await self._show_owner_management(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'show_owners')
        @owner_required
        async def handle_show_owners(cb: CallbackQuery):
            await self._show_owners_list(cb.message, edit=True)
            await cb.answer()

        @self.dp.callback_query(F.data == 'security_info')
        @owner_required
        async def handle_security_info(cb: CallbackQuery):
            await self._show_security_info(cb.message, edit=True)
            await cb.answer()

    async def _send_initial_setup(self):
        owners = self.owner_manager.get_all_owners()
        if not owners:
            owners = self.db.get_config('owners', [])
        for owner_id in owners:
            try:
                await self.bot.send_message(owner_id, 'üéâ <b>Argent UserBot —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n<blockquote>ü§ñ <b>Inline –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</b>\n\n‚öóÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\nüîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π\nüåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞\nüì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏\nüëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≤–Ω–µ—Ä–∞–º–∏\nüìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\nüî¨ <b>–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã</blockquote>', reply_markup=self._get_initial_setup_keyboard())
            except Exception as e:
                logger.error(f'Failed to send initial message to {owner_id}: {e}')

    def _get_initial_setup_keyboard(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É', callback_data='restart_settings')], [InlineKeyboardButton(text='üåç –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫', callback_data='language_settings')], [InlineKeyboardButton(text='üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])

    async def _show_main_menu(self, message: Message, edit: bool=False):
        text = '<b>‚öóÔ∏è Argent UserBot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n<blockquote>üß™ <b>–ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é Telegram</b>\n\n<b>üî¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\nüì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏\nüìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞\n\nüß¨ <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ</blockquote>'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')], [InlineKeyboardButton(text='üì¶ –ú–æ–¥—É–ª–∏', callback_data='modules_menu')], [InlineKeyboardButton(text='üìä –°–∏—Å—Ç–µ–º–∞', callback_data='system_info')], [InlineKeyboardButton(text='üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', callback_data='restart_userbot')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_settings_menu(self, message: Message, edit: bool=False):
        current_lang = self.db.get_config('language', 'ru')
        restart_hours = self.db.get_config('auto_restart_hours')
        lang_names = {'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'en': 'üá∫üá∏ English', 'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'de': 'üá©üá™ Deutsch', 'fr': 'üá´üá∑ Fran√ßais'}
        text = f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n<blockquote><b>üåç –Ø–∑—ã–∫:</b> {lang_names.get(current_lang, current_lang)}\n\n<b>‚è∞ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞:</b> {('–∫–∞–∂–¥—ã–µ ' + str(restart_hours) + ' —á.' if restart_hours else '–æ—Ç–∫–ª—é—á–µ–Ω–∞')}\n\n<b>üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b></blockquote>"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üåç –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', callback_data='language_settings')], [InlineKeyboardButton(text='‚è∞ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', callback_data='restart_settings')], [InlineKeyboardButton(text='üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏', callback_data='owner_management')], [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_restart_settings(self, message: Message, edit: bool=False):
        current_hours = self.db.get_config('auto_restart_hours')
        text = f"<b>‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏</b>\n<blockquote><b>üìä –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {('–∫–∞–∂–¥—ã–µ ' + str(current_hours) + ' —á–∞—Å–æ–≤' if current_hours else '–æ—Ç–∫–ª—é—á–µ–Ω–æ')}\n\n<b>üî¨ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:</b>\n6 —á–∞—Å–æ–≤ ‚Äî –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n12 —á–∞—Å–æ–≤ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º\n24 —á–∞—Å–∞ ‚Äî –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n‚öõÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b></blockquote>"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='6 —á–∞—Å–æ–≤', callback_data='set_restart_6'), InlineKeyboardButton(text='12 —á–∞—Å–æ–≤', callback_data='set_restart_12')], [InlineKeyboardButton(text='24 —á–∞—Å–∞', callback_data='set_restart_24'), InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å', callback_data='set_restart_off')], [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='settings')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_language_settings(self, message: Message, edit: bool=False):
        current_lang = self.db.get_config('language', 'ru')
        text = f'<b>üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞</b>\n<blockquote><b>üìç –¢–µ–∫—É—â–∏–π —è–∑—ã–∫:</b> {current_lang.upper()}\n\nüî¨ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</b></blockquote>'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='set_lang_ru'), InlineKeyboardButton(text='üá∫üá∏ English', callback_data='set_lang_en')], [InlineKeyboardButton(text='üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data='set_lang_uk'), InlineKeyboardButton(text='üá©üá™ Deutsch', callback_data='set_lang_de')], [InlineKeyboardButton(text='üá´üá∑ Fran√ßais', callback_data='set_lang_fr')], [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='settings')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_modules_menu(self, message: Message, edit: bool=False):
        text = '<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏</b>\n<blockquote>üß™ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\nüîß SystemCore ‚Äî —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\nüß™ CoreUtils ‚Äî –±–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã\nüëë AdminTools ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ\nüé≠ FunLab ‚Äî —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n\n‚öõÔ∏è <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π\n–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</blockquote>'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ', callback_data='reload_all_modules')], [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π', callback_data='list_modules')], [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_system_info(self, message: Message, edit: bool=False):
        import psutil
        import time
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        owners_count = len(self.db.get_config('owners', []))
        language = self.db.get_config('language', 'ru')
        text = f"\n\nüìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n<b>üñ•Ô∏è –°–µ—Ä–≤–µ—Ä:</b>\n‚Ä¢ <b>CPU:</b> {cpu_percent}%\n‚Ä¢ <b>RAM:</b> {memory.percent}%\n‚Ä¢ <b>–î–∏—Å–∫:</b> –î–æ—Å—Ç—É–ø–µ–Ω\n\n<b>‚öóÔ∏è Argent UserBot:</b>\n‚Ä¢ <b>–í–µ—Ä—Å–∏—è:</b> 2.0.0\n‚Ä¢ <b>–Ø–∑—ã–∫:</b> {language.upper()}\n‚Ä¢ <b>–û–≤–Ω–µ—Ä–æ–≤:</b> {owners_count}\n‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n<b>üî¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {time.strftime('%H:%M:%S')}\n\n        "
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='system_info')], [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _safe_edit(self, message: Message, text: str, reply_markup: Optional[InlineKeyboardMarkup]=None):
        try:
            await message.edit_text(text, reply_markup=reply_markup)
        except TelegramBadRequest as e:
            if 'message is not modified' in str(e):
                try:
                    await message.edit_text(text + '\u2060', reply_markup=reply_markup)
                except TelegramBadRequest:
                    pass
            elif 'message to edit not found' in str(e):
                pass
            else:
                logger.error(f'–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        except Exception as e:
            logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}')

    def _get_back_keyboard(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='settings')], [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])

    async def _show_owner_management(self, message: Message, edit: bool=False):
        primary_owner = self.owner_manager.get_primary_owner()
        all_owners = self.owner_manager.get_all_owners()
        total_owners = len(all_owners)
        text = f'<b>üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏</b>\n<blockquote><b>üîê –û—Å–Ω–æ–≤–Ω–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü:</b> <code>{primary_owner}</code>\n<b>üë• –í—Å–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b> {total_owners}\n\n<b>üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n‚Ä¢ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º\n‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å\n‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n\n<b>‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b></blockquote>'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üë• –°–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', callback_data='show_owners')], [InlineKeyboardButton(text='üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', callback_data='security_info')], [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='settings')], [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_owners_list(self, message: Message, edit: bool=False):
        primary_owner = self.owner_manager.get_primary_owner()
        all_owners = self.owner_manager.get_all_owners()
        text = '<b>üë• –°–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</b>\n<blockquote>'
        for i, owner_id in enumerate(all_owners, 1):
            status = 'üëë –û—Å–Ω–æ–≤–Ω–æ–π' if owner_id == primary_owner else 'üë§ –û–±—ã—á–Ω—ã–π'
            text += f'{i}. <code>{owner_id}</code> - {status}\n'
        text += f'\n<b>üìä –í—Å–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b> {len(all_owners)}'
        text += '\n\n<b>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
        text += '‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º\n'
        text += '‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å\n'
        text += '‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        text += '</blockquote>'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='show_owners')], [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='owner_management')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def _show_security_info(self, message: Message, edit: bool=False):
        config_info = self.owner_manager.get_config_info()
        text = f"<b>üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n<blockquote><b>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü: {('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config_info['has_primary_owner'] else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n‚Ä¢ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: <code>{config_info['primary_owner'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>\n‚Ä¢ –í—Å–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: {config_info['total_owners']}\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {('‚úÖ –î–∞' if config_info['setup_completed'] else '‚ùå –ù–µ—Ç')}\n‚Ä¢ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {('‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if config_info['config_file_exists'] else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n<b>üõ°Ô∏è –ü—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n‚Ä¢ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n<b>üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>\n–ù–µ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ –º–æ–¥—É–ª–∏ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ</blockquote>"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='security_info')], [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='owner_management')]])
        if edit:
            await self._safe_edit(message, text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    async def stop(self):
        self._running = False
        if self.bot:
            await self.bot.session.close()
        logger.info('ü§ñ Inline bot stopped')
